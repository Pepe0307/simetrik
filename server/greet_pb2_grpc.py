# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greet_pb2 as greet__pb2


class GreeterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayGame = channel.unary_unary(
            "/greet.Greeter/SayGame",
            request_serializer=greet__pb2.GameRequest.SerializeToString,
            response_deserializer=greet__pb2.GameReply.FromString,
        )
        self.SayConsole = channel.unary_stream(
            "/greet.Greeter/SayConsole",
            request_serializer=greet__pb2.ConsoleRequest.SerializeToString,
            response_deserializer=greet__pb2.GameReply.FromString,
        )
        self.StreamGames = channel.stream_stream(
            "/greet.Greeter/StreamGames",
            request_serializer=greet__pb2.GameRequest.SerializeToString,
            response_deserializer=greet__pb2.GamesReply.FromString,
        )


class GreeterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayGame(self, request, context):
        """Unary"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SayConsole(self, request, context):
        """Server Streaming"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamGames(self, request_iterator, context):
        """Both Streaming"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SayGame": grpc.unary_unary_rpc_method_handler(
            servicer.SayGame,
            request_deserializer=greet__pb2.GameRequest.FromString,
            response_serializer=greet__pb2.GameReply.SerializeToString,
        ),
        "SayConsole": grpc.unary_stream_rpc_method_handler(
            servicer.SayConsole,
            request_deserializer=greet__pb2.ConsoleRequest.FromString,
            response_serializer=greet__pb2.GameReply.SerializeToString,
        ),
        "StreamGames": grpc.stream_stream_rpc_method_handler(
            servicer.StreamGames,
            request_deserializer=greet__pb2.GameRequest.FromString,
            response_serializer=greet__pb2.GamesReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "greet.Greeter", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayGame(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/greet.Greeter/SayGame",
            greet__pb2.GameRequest.SerializeToString,
            greet__pb2.GameReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SayConsole(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/greet.Greeter/SayConsole",
            greet__pb2.ConsoleRequest.SerializeToString,
            greet__pb2.GameReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StreamGames(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/greet.Greeter/StreamGames",
            greet__pb2.GameRequest.SerializeToString,
            greet__pb2.GamesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
